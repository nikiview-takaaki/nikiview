// lib/firebase.ts
import { initializeApp, getApps } from "firebase/app";
import {
  getFirestore,
  collection,
  addDoc,
  getDocs,
  query,
  orderBy,
  serverTimestamp,
  deleteDoc,
  updateDoc,
  doc,
} from "firebase/firestore";
import { getAuth, signInAnonymously } from "firebase/auth";

// Firebase ConfigÔºàÁí∞Â¢ÉÂ§âÊï∞„Åã„ÇâÂèñÂæóÔºâ
const firebaseConfig = {
  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,
  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,
  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,
  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,
  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID,
};

// Firebase App ÂàùÊúüÂåñÔºàÈáçË§áÈò≤Ê≠¢Ôºâ
const app = getApps().length === 0 ? initializeApp(firebaseConfig) : getApps()[0];
const db = getFirestore(app);
const auth = getAuth(app);

// ÂåøÂêç„É≠„Ç∞„Ç§„É≥ÔºàÊú™„É≠„Ç∞„Ç§„É≥ÊôÇ„ÅÆ„ÅøÔºâ
signInAnonymously(auth).catch((error) => {
  console.error("ÂåøÂêç„É≠„Ç∞„Ç§„É≥„Å´Â§±Êïó:", error);
});

// üîΩ ÊäïÁ®ø„Çí‰øùÂ≠ò„Åô„ÇãÈñ¢Êï∞ÔºàcreatedAt ‰ªò„ÅçÔºâ
export const savePost = async (postData: any) => {
  try {
    await addDoc(collection(db, "posts"), {
      ...postData,
      createdAt: serverTimestamp(),
    });
  } catch (error) {
    console.error("Firestore„Å∏„ÅÆ‰øùÂ≠ò„Ç®„É©„Éº:", error);
    throw error;
  }
};

// üîΩ ÊäïÁ®ø„ÇíÂèñÂæó„Åô„ÇãÈñ¢Êï∞ÔºàÊñ∞ÁùÄÈ†ÜÔºâ
export const fetchPosts = async () => {
  try {
    const postsRef = collection(db, "posts");
    const q = query(postsRef, orderBy("createdAt", "desc"));
    const snapshot = await getDocs(q);
    return snapshot.docs.map((doc) => ({
      id: doc.id,
      ...doc.data(),
    }));
  } catch (error) {
    console.error("Firestore„Åã„Çâ„ÅÆÂèñÂæó„Ç®„É©„Éº:", error);
    throw error;
  }
};

// üîΩ ÊäïÁ®ø„ÇíÂâäÈô§„Åô„ÇãÈñ¢Êï∞
export const deletePost = async (id: string) => {
  try {
    await deleteDoc(doc(db, "posts", id));
  } catch (error) {
    console.error("Firestore„ÅÆÂâäÈô§„Ç®„É©„Éº:", error);
    throw error;
  }
};

// üîΩ ÊäïÁ®ø„ÇíÊõ¥Êñ∞„Åô„ÇãÈñ¢Êï∞ÔºàÁ∑®ÈõÜÁî®Ôºâ
export const updatePost = async (id: string, newData: any) => {
  try {
    const postRef = doc(db, "posts", id);
    await updateDoc(postRef, {
      diaryText: newData.diaryText,
      updatedAt: serverTimestamp(),
    });
  } catch (error) {
    console.error("Firestore„ÅÆÊõ¥Êñ∞„Ç®„É©„Éº:", error);
    throw error;
  }
};

export { db, auth };
